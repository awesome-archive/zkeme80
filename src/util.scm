(define util-asm
  ;; util.asm
  `((label get-battery-level)
    (push af)
    (ld b 0)
    (ld a #b00000110)
    (out (6) a)
    (in a (2))
    (bit 0 a)
    (jr z get-battery-level-done)

    (ld b 1)
    (ld a #b01000110)
    (out (6) a)
    (in a (2))
    (bit 0 a)
    (jr z get-battery-level-done)

    (ld b 2)
    (ld a #b10000110)
    (out (6) a)
    (in a (2))
    (bit 0 a)
    (jr z get-battery-level-done)

    (ld b 3)
    (ld a #b11000110)
    (out (6) a)
    (in a (2))
    (bit 0 a)
    (jr z get-battery-level-done)
    (ld b 4)

    (label get-battery-level-done)
    (ld a #b110)
    (out (6) a)
    (pop af)
    (ret)

    (label sleep)
    (ld a i)
    (push af)
    (ld a 2)
    (out (#x10) a)
    (di)
    (im 1)
    (ei)
    (ld a 1)
    (out (3) a)
    (halt)
    (di)
    (ld a #xb)
    (out (3) a)
    (ld a 3)
    (out (#x10) a)
    (pop af)
    (ret po)
    (ei)
    (ret)

    (label de-mul-a)
    (ld hl 0)
    (ld b 8)
    (label de-mul-loop)
    (rrca)
    (jr nc de-mul-skip)
    (add hl de)
    (label de-mul-skip)
    (sla e)
    (rl d)
    (djnz de-mul-loop)
    (ret)

    (label unlock-flash)
    (push af)
    (push bc)
    (in a (6))
    (push af)
    (ld a #x3c)
    (out (6) a)
    (ld b 1)
    (ld c #x14)
    (call #x4001)
    (pop af)
    (out (6) a)
    (pop bc)
    (pop af)
    (ret)

    (label lock-flash)
    (push af)
    (push bc)
    (in a (6))
    (push af)
    (ld a #x3c)
    (out (6) a)
    (ld b 0)
    (ld c #x14)
    (call #x4017)
    (pop af)
    (out (6) a)
    (pop bc)
    (pop af)
    (ret)

    (label unprotect-ram)
    (xor a)
    (out (25) a)
    (dec a)
    (out (26) a)
    (ret)

    (label cp-hl-de)
    (push hl)
    (or a)
    (sbc hl de)
    (pop hl)
    (ret)

    (label cp-hl-bc)
    (push hl)
    (or a)
    (sbc hl bc)
    (pop hl)
    (ret)

    (label cp-bc-de)
    (push hl)
    (ld h b)
    (ld l c)
    (or a)
    (sbc hl de)
    (pop hl)
    (ret)

    (label cp-de-bc)
    (push hl)
    (ld h d)
    (ld l e)
    (or a)
    (sbc hl bc)
    (pop hl)
    (ret)

    (label compare-strings)
    (ld a (de))
    (or a)
    (jr z compare-strings-eos)
    (cp (hl))
    (ret nz)
    (inc hl)
    (inc de)
    (jr compare-strings)
    (label compare-strings-eos)
    (ld a (hl))
    (or a)
    (ret)

    (label quicksort)
    ,@(push* '(hl de bc af))
    (ld hl 0)
    (push hl)
    (label qs-loop)
    (ld h b)
    (ld l c)
    (or a)
    (sbc hl de)
    (jp c next1)
    (pop bc)
    (ld a b)
    (or c)
    (jr z end-qs)
    (pop de)
    (jp qs-loop)

    (label next1)
    (push de)
    (push bc)
    (ld a (bc))
    (ld h a)
    (dec bc)
    (inc de)

    (label fleft)
    (inc bc)
    (ld a (bc))
    (cp h)
    (jp c fleft)

    (label fright)
    (dec de)
    (ld a (de))
    (ld l a)
    (ld a h)
    (cp l)
    (jp c fright)
    (push hl)
    (ld h d)
    (ld l e)
    (or a)
    (sbc hl bc)
    (jp c next2)
    (ld a (bc))
    (ld h a)
    (ld a (de))
    (ld (bc) a)
    (ld a h)
    (ld (de) a)
    (pop hl)
    (jp fleft)

    (label next2)
    (pop hl)
    (pop hl)
    (push bc)
    (ld b h)
    (ld c l)
    (jp qs-loop)

    (label end-qs)
    ,@(pop* '(af bc de hl))
    (ret)))
