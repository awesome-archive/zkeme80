\ We define the rest of Forth.

\ Possibly test interrupts later.
\ : BAR FOO 200 SET-INTERRUPT ;
\ BAR

\ Parse the next word as binary number.
: %B
  0
  BEGIN
    GETC DUP NUM? NOT
    IF
      DROP STATE @ IF ' LIT ,  , THEN EXIT
    ELSE
      '0' - SWAP 2* +
    THEN
  AGAIN
; IMMEDIATE


HERE
%B 00000000 C,
%B 00000000 C,
%B 00100100 C,
%B 01000010 C,
%B 01000010 C,
%B 01000010 C,
%B 01000010 C,
%B 00100100 C,
CONSTANT ZKEME80-LOGO-00

HERE
%B 00000000 C,
%B 00011000 C,
%B 00100100 C,
%B 00100100 C,
%B 00011000 C,
%B 00100100 C,
%B 00100100 C,
%B 00011000 C,
CONSTANT ZKEME80-LOGO-01

HERE
%B 00000000 C,
%B 00011000 C,
%B 00100100 C,
%B 00100100 C,
%B 00100100 C,
%B 00100100 C,
%B 00011000 C,
%B 00000000 C,
CONSTANT ZKEME80-LOGO-11

HERE
%B 00000000 C,
%B 00000000 C,
%B 01111100 C,
%B 00001000 C,
%B 00010000 C,
%B 00100000 C,
%B 01111100 C,
%B 00000000 C,
CONSTANT ZKEME80-LOGO-10

HERE
%B 00000000 C,
%B 00000000 C,
%B 00111100 C,
%B 00111100 C,
%B 00111100 C,
%B 00111100 C,
%B 00000000 C,
%B 00000000 C,
CONSTANT LOADING-DOT

38 VALUE ZKEME80-LOGO-STARTX
27 VALUE ZKEME80-LOGO-STARTY

30 VALUE DOT-X
45 VALUE DOT-Y

: DRAW-LOGO ( addr x y -- ) 8 -ROT PUT-SPRITE-XOR ;

: DRAW-LOADING-DOT LOADING-DOT DOT-X DOT-Y DRAW-LOGO 8 +TO DOT-X ;

: ZKEME80-LOGO
  ZKEME80-LOGO-STARTX 5 - ZKEME80-LOGO-STARTY 9 -
  AT-XY ." zkeme80"
  ZKEME80-LOGO-00 ZKEME80-LOGO-STARTX     ZKEME80-LOGO-STARTY     DRAW-LOGO
  ZKEME80-LOGO-01 ZKEME80-LOGO-STARTX 8 + ZKEME80-LOGO-STARTY     DRAW-LOGO
  ZKEME80-LOGO-10 ZKEME80-LOGO-STARTX     ZKEME80-LOGO-STARTY 8 + DRAW-LOGO
  ZKEME80-LOGO-11 ZKEME80-LOGO-STARTX 8 + ZKEME80-LOGO-STARTY 8 + DRAW-LOGO
  ZKEME80-LOGO-STARTX  ZKEME80-LOGO-STARTY 16 16
  RECT-XOR
;

ZKEME80-LOGO
DRAW-LOADING-DOT

: LOAD-TEST-SUITE
  4 SET-RAM-MEMA
  IF
    MEMA INPUT-PTR !
  ELSE
    ." Couldn't load the test
suite.  Shutting down." CR
    SHUTDOWN
  THEN
;

: LOAD-SHELL
  5 SET-RAM-MEMA
  IF
    MEMA INPUT-PTR !
  ELSE
    ." Couldn't load the test
suite.  Shutting down." CR
    SHUTDOWN
  THEN
;

\ Bit shifts are not fast!

: RSHIFT ?DUP IF 0 DO 2/ LOOP THEN ;
: LSHIFT ?DUP IF 0 DO 2* LOOP THEN ;

: TYPE 0 DO DUP C@ EMIT 1+ LOOP DROP ;

: UNLOOP    ( -- , r: i limit -- : remove limit and i from  )
        R>           ( save our return address )
        RDROP        ( pop off i )
        RDROP        ( pop off limit )
        >R
;

\ This is not correct.  It should break out to the words following the
\ DO ... LOOP construct, rather than existing the currently running
\ word entirely.

: LEAVE ( -- , r: i limit return -- : break out of a do-loop construct )
  UNLOOP
  RDROP
; ( return to the caller's caller routine )


: BEGIN-STRUCTURE  \ -- addr 0 ; -- size
   CREATE
     HERE 0 0 ,    \ mark stack, lay dummy
   DOES> @         \ -- rec-len
;

: +FIELD           \ n <"name"> -- ; Exec: addr -- 'addr
   CREATE OVER , +
   DOES> @ +
;

: FIELD:           ( n1 "name" -- n2 ; addr1 -- addr2 )
  1 CELLS +FIELD
;

: END-STRUCTURE    \ addr n --
  SWAP !
;                  \ set len

\ Non-standard for now.
\ Display n defined words.

: WORDS ( n -- )
  LATEST @ SWAP 0 DO
    ?DUP IF
      DUP ?HIDDEN NOT IF
        DUP ID. SPACE
      THEN
      @
    ELSE
      LEAVE
    THEN
  LOOP
  DROP
;

\ Returns the number of words defined.

: NUMBER-OF-WORDS ( -- n )
  0 HERE ! LATEST @
  BEGIN
    ?DUP
  WHILE
    DUP ?HIDDEN NOT
    IF 1 HERE +! THEN
    @
  REPEAT
  HERE @
;

: STATUS
DECIMAL UNUSED .
." bytes available" CR
HEX HERE ." HERE is at " . CR DECIMAL
." Stack has contents" CR
.S
;


1 CONSTANT RIGHT
2 CONSTANT LEFT
3 CONSTANT UP
4 CONSTANT DOWN

DRAW-LOADING-DOT
\ Simple grid menu system demo.

\ Make a grid of cells.
: GRID ( width height "name" -- )
  CREATE  OVER ,  * CELLS ALLOT
  DOES> ( x y -- addr ) DUP CELL+ >R  @ * + CELLS R> +
;

\ Grid parameters.
2 CONSTANT ROWS
2 CONSTANT COLUMNS

\ The contents of the menu choices should be pointers to menu entry
\ structures.
ROWS COLUMNS GRID MENU-ENTRIES

\ Menu entry structures contain pointers to routines that draw the
\ selection and deselection updates, and what the menu entry should do
\ when it's clicked through.
BEGIN-STRUCTURE MENU-ENTRY
  \ An xt of type ( -- ) that selects the menu entry.
  FIELD: MENU-ENTRY.SELECTOR
  \ An xt of type ( -- ) that deselects the menu entry.
  FIELD: MENU-ENTRY.DESELECTOR
  \ An xt of type ( -- ) that is the menu entry's action.
  FIELD: MENU-ENTRY.ON-CLICK
END-STRUCTURE

: NEW-MENU-ENTRY ( x y [parse: "name"] -- )
  MENU-ENTRIES \ addr to write to
  HERE DUP MENU-ENTRY ALLOT CREATE
  ['] LIT , , ['] EXIT ,
  SWAP !
;

: STATUS
DECIMAL UNUSED .
." bytes available" CR
HEX HERE ." HERE is at " . CR DECIMAL
." Stack has contents" CR
.S
;

\ Have we clicked through?
0 VALUE CLICKED?
VARIABLE XPOS
VARIABLE YPOS
ROWS    1- CONSTANT MENU-MAX-X
COLUMNS 1- CONSTANT MENU-MAX-Y

: INC! 1 SWAP +! ;
: DEC! 1 SWAP -! ;

: INC-XPOS XPOS INC! ;
: INC-YPOS YPOS INC! ;

: DEC-XPOS XPOS @ IF XPOS DEC! THEN ;
: DEC-YPOS YPOS @ IF YPOS DEC! THEN ;

: NORMALIZE-X XPOS @ MENU-MAX-X MIN XPOS ! ;
: NORMALIZE-Y YPOS @ MENU-MAX-Y MIN YPOS ! ;
: NORMALIZE-POS NORMALIZE-X NORMALIZE-Y ;

\ Takes and arrow key and updates XPOS and YPOS.
: MAYBE-UPDATE-XY ( arrow-key -- )
  CASE
    RIGHT OF INC-XPOS ENDOF
    LEFT  OF DEC-XPOS ENDOF
    UP    OF INC-YPOS ENDOF
    DOWN  OF DEC-YPOS ENDOF
  ENDCASE
  NORMALIZE-POS
;

0 0 NEW-MENU-ENTRY TOP-LEFT
1 0 NEW-MENU-ENTRY TOP-RIGHT
0 1 NEW-MENU-ENTRY BOTTOM-LEFT
1 1 NEW-MENU-ENTRY BOTTOM-RIGHT

: DRAW-XOR-SQUARE ( x y size -- ) DUP RECT-XOR ;

: DRAW-AND-SQUARE ( x y size -- ) DUP RECT-AND ;

: DRAW-SQUARE ( x y size -- ) DUP RECT-OR ;

: DRAW-SQUARE-WITH-BORDER ( x y size border -- )
  HERE !
  \ Draw the default box
  0 2OVER 2OVER DROP DRAW-SQUARE DROP
  \ Double the border and subtract from the size.
  \ ( x y size' )
  HERE @ 2* - ROT HERE @ + ROT HERE @ + ROT DRAW-AND-SQUARE
;

DRAW-LOADING-DOT

HERE
%B 00000000 C,
%B 00110000 C,
%B 00001000 C,
%B 00001000 C,
%B 00010000 C,
%B 00000000 C,
%B 00010000 C,
%B 00000000 C,
CONSTANT INFO-SPRITE

HERE
%B 00000000 C,
%B 00010000 C,
%B 00010000 C,
%B 01010100 C,
%B 01010100 C,
%B 01000100 C,
%B 00111000 C,
%B 00000000 C,
CONSTANT POWEROFF-SPRITE

HERE
%B 00000000 C,
%B 00000000 C,
%B 01001000 C,
%B 00100100 C,
%B 00010010 C,
%B 00100100 C,
%B 01001000 C,
%B 00000000 C,
CONSTANT SHELL-SPRITE

HERE
%B 00000000 C,
%B 00000000 C,
%B 01111100 C,
%B 00010000 C,
%B 00010000 C,
%B 00010000 C,
%B 00010000 C,
%B 00000000 C,
CONSTANT TEST-SPRITE

20 CONSTANT BUTTON-SIZE
1  CONSTANT BORDER-SIZE

\ Where the menu starts drawing.
5  CONSTANT MENU-STARTX
12 CONSTANT MENU-STARTY

\ Logo offsets
7  CONSTANT LOGO-OFFSETX
6  CONSTANT LOGO-OFFSETY

\ Button spacing
5  CONSTANT BUTTON-SPACING

: MENU-START MENU-STARTX MENU-STARTY ;
: DRAW-SELECTED-BUTTON BUTTON-SIZE DRAW-SQUARE ;
: DRAW-DESELECTED-BUTTON BUTTON-SIZE BORDER-SIZE DRAW-SQUARE-WITH-BORDER ;

\ The number of pixels taken by n buttons.
: BUTTONS ( n -- pixels ) BUTTON-SIZE BUTTON-SPACING + * ;
\ Convert an x/y position of the menu into pixel x/y coordinates.
: BUTTON-COORDS ( x y -- px py )
  BUTTONS MENU-STARTY + SWAP BUTTONS MENU-STARTX + SWAP
;

: CLEAR-TITLE 0 0 MAX-COL 5 RECT-AND ;

VARIABLE CURRENT-TITLE

: TEST-TITLE         ORIGIN ." Run the test suite.     " ;
: POWEROFF-TITLE     ORIGIN ." Shut down the device.   " ;
: INFO-TITLE         ORIGIN ." View system information." ;
: SHELL-TITLE        ORIGIN ." Start a shell.          " ;

\ Add logo offset x
: +LOX LOGO-OFFSETX + ;

\ Add logo offset y
: +LOY LOGO-OFFSETY + ;

\ What's the current menu entry?
: CURRENT-MENU-ENTRY ( -- ) XPOS @ YPOS @ MENU-ENTRIES @ ;
\ Maybe execute something.
: ?EXECUTE ( n -- ) ?DUP IF EXECUTE THEN ;
\ Given a pointer to a menu entry, run its selector xt if it's not null.
: ?RUN-SELECTOR ( menu-entry -- ) ?DUP IF MENU-ENTRY.SELECTOR @ ?EXECUTE THEN ;
\ Given a pointer to a menu entry, run its deselector xt if it's not null.
: ?RUN-DESELECTOR ( menu-entry -- ) ?DUP IF MENU-ENTRY.DESELECTOR @ ?EXECUTE THEN ;
\ Given a pointer to a menu entry, run its on click xt if it's not null.
: ?RUN-ON-CLICK ( menu-entry -- ) ?DUP IF MENU-ENTRY.ON-CLICK @ ?EXECUTE THEN ;
\ Deselect the previous menu entry.
: DESELECT-PREV ( -- ) CURRENT-MENU-ENTRY ?RUN-DESELECTOR ;
\ Deselect the specified entry at (x, y).
: DESELECT-ENTRY ( x y -- ) MENU-ENTRIES @ ?RUN-DESELECTOR ;
\ Run the selector at the current menu choice.
: DRAW-TICK     ( -- ) CURRENT-MENU-ENTRY ?RUN-SELECTOR ;

DRAW-LOADING-DOT

\ Is n an arrow key?
: ARROW-KEY?    ( n -- b ) DUP 1 4 WITHIN SWAP 9 = OR ;
\ Block until an arrow key is read.
: GET-ARROW-KEY ( -- k ) BEGIN KEYC DUP ARROW-KEY? IF EXIT THEN DROP AGAIN ;
\ Set the click flag iff the xt is not null.
: ?DO-CLICK ( xt|0 -- ) DUP MENU-ENTRY.ON-CLICK @ IF 1 TO CLICKED? THEN ;
\ Maybe the key is enter, and act on it.
: MAYBE-ENTER ( n -- ) 9 = IF CURRENT-MENU-ENTRY ?DO-CLICK ?RUN-ON-CLICK THEN ;
\ Act upon a key code.
: MAYBE-ACT ( k -- ) DUP MAYBE-UPDATE-XY MAYBE-ENTER ;
\ One tick of the menu demo.
: MENU-DEMO-TICK ( -- ) GET-ARROW-KEY DESELECT-PREV MAYBE-ACT DRAW-TICK ;
\ Draw the menu deselected.
: DRAW-ENTRIES-DESELECTED ( -- ) ROWS 0 DO COLUMNS 0 DO I J DESELECT-ENTRY LOOP LOOP ;
\ Initialize the current x and y.
: INIT-XY ( -- ) 0 XPOS ! 0 YPOS ! ;

66 TO ZKEME80-LOGO-STARTX
29 TO ZKEME80-LOGO-STARTY

: MENU-INIT 0 TO CLICKED? PAGE ZKEME80-LOGO DRAW-ENTRIES-DESELECTED INIT-XY DRAW-TICK ;
\ The demo.
: MENU-DEMO ( -- ) MENU-INIT BEGIN CLICKED? NOT WHILE MENU-DEMO-TICK REPEAT ;


0 0 BUTTON-COORDS CONSTANT TLY CONSTANT TLX

: TL-LOGO POWEROFF-SPRITE TLX +LOX TLY +LOY DRAW-LOGO ;
: TL-TITLE CLEAR-TITLE POWEROFF-TITLE ;
: TOP-LEFT-SELECT TLX TLY DRAW-SELECTED-BUTTON TL-LOGO TL-TITLE ;
: TOP-LEFT-DESELECT TLX TLY DRAW-DESELECTED-BUTTON TL-LOGO ;


0 1 BUTTON-COORDS CONSTANT BLY CONSTANT BLX

: BL-LOGO INFO-SPRITE BLX +LOX BLY +LOY DRAW-LOGO ;
: BL-TITLE CLEAR-TITLE INFO-TITLE ;
: BOTTOM-LEFT-SELECT BLX BLY DRAW-SELECTED-BUTTON BL-LOGO BL-TITLE ;
: BOTTOM-LEFT-DESELECT BLX BLY DRAW-DESELECTED-BUTTON BL-LOGO ;
: BOTTOM-LEFT-ON-CLICK
  PAGE STATUS CR
  ." This system has " NUMBER-OF-WORDS . CR
  ." words defined."
  PAUSE MENU-INIT
;

1 0 BUTTON-COORDS CONSTANT TRY CONSTANT TRX

: TR-LOGO SHELL-SPRITE TRX +LOX TRY +LOY DRAW-LOGO ;
: TR-TITLE CLEAR-TITLE SHELL-TITLE ;
: TOP-RIGHT-SELECT TRX TRY DRAW-SELECTED-BUTTON TR-LOGO TR-TITLE ;
: TOP-RIGHT-DESELECT TRX TRY DRAW-DESELECTED-BUTTON TR-LOGO ;
: TOP-RIGHT-ON-CLICK LOAD-SHELL ;

1 1 BUTTON-COORDS CONSTANT BRY CONSTANT BRX

: BR-LOGO TEST-SPRITE BRX +LOX BRY +LOY DRAW-LOGO ;
: BR-TITLE CLEAR-TITLE TEST-TITLE ;
: BOTTOM-RIGHT-SELECT BRX BRY DRAW-SELECTED-BUTTON BR-LOGO BR-TITLE ;
: BOTTOM-RIGHT-DESELECT BRX BRY DRAW-DESELECTED-BUTTON BR-LOGO ;
: BOTTOM-RIGHT-ON-CLICK PAGE LOAD-TEST-SUITE ;

: SET-MENU-ENTRY-SELECTOR MENU-ENTRY.SELECTOR ' SWAP ! ;
: SET-MENU-ENTRY-DESELECTOR MENU-ENTRY.DESELECTOR ' SWAP ! ;
: SET-MENU-ENTRY-ON-CLICK MENU-ENTRY.ON-CLICK ' SWAP ! ;

TOP-LEFT SET-MENU-ENTRY-SELECTOR TOP-LEFT-SELECT
TOP-LEFT SET-MENU-ENTRY-DESELECTOR TOP-LEFT-DESELECT
TOP-LEFT SET-MENU-ENTRY-ON-CLICK POWEROFF

BOTTOM-LEFT SET-MENU-ENTRY-SELECTOR BOTTOM-LEFT-SELECT
BOTTOM-LEFT SET-MENU-ENTRY-DESELECTOR BOTTOM-LEFT-DESELECT
BOTTOM-LEFT SET-MENU-ENTRY-ON-CLICK BOTTOM-LEFT-ON-CLICK

TOP-RIGHT SET-MENU-ENTRY-SELECTOR TOP-RIGHT-SELECT
TOP-RIGHT SET-MENU-ENTRY-DESELECTOR TOP-RIGHT-DESELECT
TOP-RIGHT SET-MENU-ENTRY-ON-CLICK TOP-RIGHT-ON-CLICK

BOTTOM-RIGHT SET-MENU-ENTRY-SELECTOR BOTTOM-RIGHT-SELECT
BOTTOM-RIGHT SET-MENU-ENTRY-DESELECTOR BOTTOM-RIGHT-DESELECT
BOTTOM-RIGHT SET-MENU-ENTRY-ON-CLICK BOTTOM-RIGHT-ON-CLICK

MENU-DEMO
