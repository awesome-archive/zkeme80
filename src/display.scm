;; display.asm
(define display-asm
  `((label clear-buffer)
    ,@(push* '(hl de bc iy))
    (pop hl)
    (ld (hl) 0)
    (ld d h)
    (ld e l)
    (inc de)
    (ld bc 767)
    (ldir)

    ,@(pop* '(bc de hl))
    (ret)

    (label buffer-to-lcd)
    (label buf-copy)
    (label fast-copy)
    (label safe-copy)
    ,@(push* '(hl bc af de))
    (ld a i)
    (push af)
    (di)
    (push iy)
    (pop hl)
    (ld c #x10)
    (ld a #x80)

    (label set-row)
    (db (#xed #x70))
    (jp m set-row)
    (out (#x10) a)
    (ld de 12)
    (ld a #x20)

    (label col)
    ;; (in f (c)) is not in the data sheet, hm.
    (db (#xed #x70))

    (jp m col)
    (out (#x10) a)
    (push af)
    (ld b 64)

    (label row)
    (ld a (hl))
    (label row-wait)
    (db (#xed #x70))

    (jp m row-wait)
    (out (#x11) a)
    (add hl de)
    (djnz row)
    (pop af)
    (dec h)
    (dec h)
    (dec h)
    (inc hl)
    (inc a)
    (cp #x2c)
    (jp nz col)
    (pop af)
    (jp po local-label17)
    (ei)

    (label local-label17)
    ,@(pop* '(de af bc hl))
    (ret)

    (label lcd-delay)
    (push af)
    (label local-label18)
    (in a (#x10))
    (rla)
    (jr c local-label18)
    (pop af)
    (ret)

    (label get-pixel)
    (ld h 0)
    (ld d h)
    (ld e l)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)
    (ld e a)
    ,@(make-list 3 '(srl e))
    (add hl de)
    (push iy)
    (pop de)
    (add hl de)
    (and 7)
    (ld b a)
    (ld a #x80)
    (ret z)

    (label local-label19)
    (rrca)
    (djnz local-label19)
    (ret)

    (label pixel-on)
    (label set-pixel)
    ,@(with-regs-preserve (hl de af bc)
                          (call get-pixel)
                          (or (hl))
                          (ld (hl) a))
    (ret)

    (label pixel-off)
    (label reset-pixel)
    ,@(with-regs-preserve (hl de af bc)
                          (call get-pixel)
                          (cpl)
                          (and (hl))
                          (ld (hl) a))
    (ret)

    (label invert-pixel)
    (label pixel-flip)
    (label pixel-invert)
    (label flip-pixel)
    ,@(with-regs-preserve (hl de af bc)
                          (call get-pixel)
                          (xor (hl))
                          (ld (hl) a))
    (ret)

    (label draw-line)
    (label draw-line-or)
    ,@(with-regs-preserve (hl de bc af ix iy)
                          (call draw-line2))
    (ret)

    (label draw-line2)
    (ld a h)
    (cp d)
    (jp nc no-swap-x)
    ((ex de hl))

    (label no-swap-x)
    (ld a h)
    (sub d)
    (jp nc pos-x)
    (neg)

    (label pos-x)
    (ld b a)
    (ld a l )
    (sub e)
    (jp nc pos-y)
    (neg)

    (label pos-y)
    (ld c a)
    (ld a l)
    (ld hl ,(- (ash 1 16) 12))
    (cp e)
    (jp c line-up)
    (ld hl 12)

    (label line-up)
    (ld ix x-bit)
    (ld a b)
    (cp c)
    (jp nc x-line)
    (ld b c)
    (ld c a)
    (ld ix y-bit)

    (label x-line)
    (push hl)
    (ld a d)
    (ld d 0)
    (ld h d)
    (sla e)
    (sla e)
    (ld l e)
    (add hl de)
    (add hl de)
    (ld e a)
    (and #b00000111)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (push iy)
    (pop de)
    (add hl de)
    (add a a)
    (ld e a)
    (ld d 0)
    (add ix de)
    (ld e (+ 0 ix))
    (ld d (+ 1 ix))
    (push hl)
    (pop ix)
    ((ex de hl))
    (pop de)
    (push hl)
    (ld h b)
    (ld l c)
    (ld a h)
    (srl a)
    (inc b)
    (ret)

    (label x-bit)
    (dw ,(map (lambda (x)
                (string->symbol (format #f "draw-x~a" x)))
              (iota 8)))

    (label y-bit)
    (dw ,(map (lambda (y)
                (string->symbol (format #f "draw-y~a" y)))
              (iota 8)))


    ;; Code generation for the win!
    ,@(concat-map (lambda (x)
                    (let* ((curr-label (string->symbol (format #f "draw-x~a" x)))
                           (next-label (string->symbol (format #f "draw-x~a" (modulo (1+ x) 8))))
                           (local-label (string->symbol (format #f "local-draw-x~a" x))))
                      `((label ,curr-label)
                        (set ,(- 7 x) (ix))
                        ,@(if (= 7 x) '((inc ix)) '())
                        (add a c)
                        (cp h)
                        (jp c ,local-label)
                        (add ix de)
                        (sub h)
                        (label ,local-label)
                        (djnz ,next-label)
                        (ret))))
                  (iota 8))

    ,@(concat-map (lambda (y)
                    (let* ((local-label (string->symbol (format #f "local-draw-y~a" y)))
                           (curr-label (string->symbol (format #f "draw-y~a" y)))
                           (next-local-label (string->symbol (format #f "local-draw-y~a" (modulo (1+ y) 8)))))
                      `((label ,local-label)
                        ,@(if (zero? y) '((inc ix)) '())
                        (sub h)
                        (dec b)
                        (ret z)
                        
                        (label ,curr-label)
                        (set ,(- 7 y) (ix))
                        (add ix de)
                        (add a l)
                        (cp h)
                        (jp nc ,next-local-label)
                        (djnz ,curr-label)
                        (ret))))
                  (iota 8))

    (label put-sprite-xor)
    ,@(with-regs-preserve (af bc hl de ix)
                          (push hl)
                          (pop ix)
                          (call clip-sprite-xor))
    (ret)

    (label clip-sprite-xor)
    (ld a #b11111111)
    (ld (#x8000) a)
    (ld a e)
    (or a)
    (jp m clip-top)
    (sub 64)
    (ret nc)
    (neg)
    (cp b)
    (jr nc vert-clip-done)
    (ld b a)
    (jr vert-clip-done)

    (label clip-top)
    (ld a b)
    (neg)
    (sub e)
    (ret nc)
    (push af)
    (add a b)
    (ld e 0)
    (ld b e)
    (ld c a)
    (add ix bc)
    (pop af)
    (neg)
    (ld b a)

    (label vert-clip-done)
    (ld c 0)
    (ld a d)
    (cp ,(- (ash 1 8) 7))
    (jr nc clip-left)

    (cp 96)
    (ret nc)

    (cp 89)
    (jr c horiz-clip-done)

    (label clip-right)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-right-mask)
    (add a a)
    (dec c)
    (jr nz find-right-mask)
    (ld (#x8000) a)
    (ld a d)
    (jr horiz-clip-done)

    (label clip-left)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-left-mask)
    (add a a)
    (dec c)
    (jr nz find-left-mask)
    (cpl)
    (ld (#x8000) a)
    (ld a d)
    (add a 96)
    (ld c 12)

    (label horiz-clip-done)
    (ld h 0)
    (ld d h)
    (ld l e)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)

    (ld e a)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)

    (push iy)
    (pop de)
    (add hl de)

    (ld d 0)
    (ld e c)
    (sbc hl de)

    (and 7)
    (jr z aligned)
    (ld c a)
    (ld de 11)

    (label row-loop)
    (push bc)
    (ld b c)
    (ld a (#x8000))
    (and (ix))
    (ld c 0)

    (label shift-loop)
    (srl a)
    (rr c)
    (djnz shift-loop)
    (xor (hl))
    (ld (hl) a)

    (inc hl)
    (ld a c)
    (xor (hl))
    (ld (hl) a)

    (add hl de)
    (inc ix)
    (pop bc)
    (djnz row-loop)
    (ret)

    (label aligned)
    (ld de 12)

    (label put-loop)
    (ld a (+ 0 ix))
    (xor (hl))
    (ld (hl) a)
    (inc ix)
    (add hl de)
    (djnz put-loop)
    (ret)

    (label put-sprite-and)
    ,@(with-regs-preserve (af bc hl de ix)
                          (push hl)
                          (pop ix)
                          (call clip-sprite-and))
    (ret)

    (label clip-sprite-and)
    (ld a #b11111111)
    (ld (#x8000) a)
    (ld a e)
    (or a)
    (jp m clip-top2)
    (sub 64)
    (ret nc)
    (neg)
    (cp b)
    (jr nc vert-clip-done2)
    (ld b a)
    (jr vert-clip-done2)

    (label clip-top2)
    (ld a b)
    (neg)
    (sub e)
    (ret nc)
    (push af)
    (add a b)
    (ld e 0)
    (ld b e)
    (ld c a)
    (add ix bc)
    (pop af)
    (neg)
    (ld b a)

    (label vert-clip-done2)
    (ld c 0)
    (ld a d)
    (cp ,(- (ash 1 8) 7))
    (jr nc clip-left2)

    (cp 96)
    (ret nc)

    (cp 89)
    (jr c horiz-clip-done2)

    (label clip-right2)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-right-mask2)
    (add a a)
    (dec c)
    (jr nz find-right-mask2)
    (ld (#x8000) a)
    (ld a d)
    (jr horiz-clip-done2)

    (label clip-left2)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-left-mask2)
    (add a a)
    (dec c)
    (jr nz find-left-mask2)
    (cpl)
    (ld (#x8000) a)
    (ld a d)
    (add a 96)
    (ld c 12)

    (label horiz-clip-done2)
    (ld h 0)
    (ld d h)
    (ld l e)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)

    (ld e a)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (push iy)
    (pop de)
    (add hl de)
    (ld d 0)
    (ld e c)
    (sbc hl de)

    (and 7)
    (jr z aligned2)

    (ld c a)
    (ld de 11)

    (label row-loop2)
    (push bc)
    (ld b c)
    (ld a (#x8000))
    (and (ix))
    (ld c 0)

    (label shift-loop2)
    (srl a)
    (rr c)
    (djnz shift-loop2)
    (cpl)
    (and (hl))
    (ld (hl) a)
    (inc hl)
    (ld a c)
    (cpl)
    (and (hl))
    (ld (hl) a)

    (add hl de)
    (inc ix)
    (pop bc)
    (djnz row-loop2)
    (ret)

    (label aligned2)
    (ld de 12)

    (label put-loop2)
    (ld a (+ 0 ix))
    (cpl)
    (and (hl))
    (ld (hl) a)
    (inc ix)
    (add hl de)
    (djnz put-loop2)
    (ret)

    ;; Hmm... I'm getting a pattern here but I can't seem to abstract
    ;; it.
    (label put-sprite-or)
    ,@(with-regs-preserve (af bc hl de ix)
                          (push hl)
                          (pop ix)
                          (call clip-sprite-or))
    (ret)

    (label clip-sprite-or)
    (ld a #b11111111)
    (ld (#x8000) a)
    (ld a e)
    (or a)
    (jp m clip-top3)

    (sub 64)
    (ret nc)
    (neg)
    (cp b)
    (jr nc vert-clip-done3)

    (ld b a)
    (jr vert-clip-done3)

    (label clip-top3)
    (ld a b)
    (neg)
    (sub e)
    (ret nc)
    (push af)
    (add a b)
    (ld e 0)
    (ld b e)
    (ld c a)

    (add ix bc)
    (pop af)
    (neg)
    (ld b a)

    (label vert-clip-done3)
    (ld c 0)
    (ld a d)

    (cp ,(- (ash 1 8) 7))
    (jr nc clip-left3)

    (cp 96)
    (ret nc)

    (cp 89)
    (jr c horiz-clip-done3)

    (label clip-right3)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-right-mask3)
    (add a a)
    (dec c)
    (jr nz find-right-mask3)
    (ld (#x8000) a)
    (ld a d)
    (jr horiz-clip-done3)

    (label clip-left3)
    (and 7)
    (ld c a)
    (ld a #b11111111)

    (label find-left-mask3)
    (add a a)
    (dec c)
    (jr nz find-left-mask3)
    (cpl)
    (ld (#x8000) a)
    (ld a d)
    (add a 96)
    (ld c 12)

    (label horiz-clip-done3)
    (ld h 0)
    (ld d h)
    (ld l e)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)
    (ld e a)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (push iy)
    (pop de)
    (add hl de)
    (ld d 0)
    (ld e c)
    (sbc hl de)

    (and 7)
    (jr z aligned3)
    (ld c a)
    (ld de 11)

    (label row-loop3)
    (push bc)
    (ld b c)
    (ld a (#x8000))
    (and (ix))
    (ld c 0)

    (label shift-loop3)
    (srl a)
    (rr c)
    (djnz shift-loop3)
    (or (hl))
    (ld (hl) a)

    (inc hl)
    (ld a c)
    (or (hl))
    (ld (hl) a)
    (add hl de)
    (inc ix)
    (pop bc)
    (djnz row-loop3)
    (ret)

    (label aligned3)
    (ld de 12)

    (label put-loop3)
    (ld a (+ 0 ix))
    (or (hl))
    (ld (hl) a)
    (inc ix)
    (add hl de)
    (djnz put-loop3)
    (ret)

    (label rect-xor)
    (ld a 96)
    (sub e)
    (ret c)
    (ret z)
    (cp c)
    (jr nc local-rx1)
    (ld c a)
    (label local-rx1)
    (ld a #x40)
    (sub l)
    (ret c)
    (ret z)
    (cp b)
    (jr nc local-rx2)
    (ld b a)
    (label local-rx2)
    (xor a)
    (cp b)
    (ret z)
    (cp c)
    (ret z)
    (ld h a)
    (ld d a)

    (push bc)
    (push iy)
    (pop bc)
    (ld a l)
    (add a a)
    (add a l)
    (ld l a)
    (add hl hl)
    (add hl hl)
    (add hl bc)
    (ld a e)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (and #b00000111)
    (pop de)

    (ld b a)
    (add a e)
    (sub 8)
    (ld e 0)
    (jr c box-inv-skip)
    (ld e a)
    (xor a)

    (label box-inv-skip)
    (label box-inv-shift)
    (add a 8)
    (sub b)
    (ld c 0)
    (label box-inv-shift1)
    (scf)
    (rr c)
    (dec a)
    (jr nz box-inv-shift1)
    (ld a c)
    (inc b)
    (rlca)

    (label box-inv-shift2)
    (rrca)
    (djnz box-inv-shift2)

    (label box-inv-loop1)
    (push hl)
    (ld b d)
    (ld c a)
    (push de)
    (ld de 12)

    (label box-inv-loop2)
    (ld a c)
    (xor (hl))
    (ld (hl) a)
    (add hl de)
    (djnz box-inv-loop2)

    (pop de)
    (pop hl)
    (inc hl)
    (ld a e)
    (or a )
    (ret z)
    (sub 8)
    (ld e b)
    (jr c box-inv-shift)
    (ld e a)
    (ld a #b11111111)
    (jr box-inv-loop1)

    (label box-inv-end)
    (label rect-or)
    (ld a 96)
    (sub e)
    (ret c)
    (ret z)
    (cp c)
    (jr nc local-ro)
    (ld c a)
    (label local-ro)
    (ld a 64)
    (sub l)
    (ret c)
    (ret z)
    (cp b)
    (jr nc local-ro2)
    (ld b a)
    (label local-ro2)
    (xor a)
    (cp b)
    (ret z)
    (cp c)
    (ret z)
    (ld h a)
    (ld d a)
    (push bc)
    (push iy)
    (pop bc)
    (ld a l)
    (add a a)
    (add a l)
    (ld l a)
    (add hl hl)
    (add hl hl)
    (add hl bc)

    (ld a e)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (and #b00000111)
    (pop de)
    (ld b a)
    (add a e)
    (sub 8)
    (ld e 0)
    (jr c box-or-skip)
    (ld e a)
    (xor a)

    ;; (db ,(string "hello"))

    (label box-or-skip)
    (label box-or-shift)
    (add a 8)
    (sub b)
    (ld c 0)
    (label box-or-shift1)
    (scf)
    (rr c)
    (dec a)
    (jr nz box-or-shift1)
    (ld a c)
    (inc b)
    (rlca)

    (label box-or-shift2)
    (rrca)
    (djnz box-or-shift2)

    (label box-or-loop1)
    (push hl)
    (ld b d)
    (ld c a)
    (push de)
    (ld de 12)

    (label box-or-loop2)
    (ld a c)
    (or (hl))
    (ld (hl) a)
    (add hl de)
    (djnz box-or-loop2)
    (pop de)
    (pop hl)
    (inc hl)
    (ld a e)
    (or a)
    (ret z)
    (sub 8)
    (ld e b)
    (jr c box-or-shift)
    (ld e a)
    (ld a #b11111111)
    (jr box-or-loop1)
    (label box-or-end)

    (label rect-and)
    (ld a 96)
    (sub e)
    (ret c)
    (ret z)
    (cp c)
    (jr nc local-ra)
    (ld c a)
    (label local-ra)
    (ld a 64)
    (sub l)
    (ret c)
    (ret z)
    (cp b)
    (jr nc local-ra1)
    (ld b a)
    (label local-ra1)
    (xor a)
    (cp b)
    (ret z)
    (cp c)
    (ret z)
    (ld h a)
    (ld d a)
    (push bc)
    (push iy)
    (pop bc)
    (ld a l)
    (add a a)
    (add a l)
    (ld l a)
    (add hl hl)
    (add hl hl)
    (add hl bc)

    (ld a e)
    (srl e)
    (srl e)
    (srl e)
    (add hl de)
    (and #b00000111)
    (pop de)

    (ld b a)
    (add a e)
    (sub 8)
    (ld e 0)
    (jr c box-and-skip)
    (ld e a)
    (xor a)

    (label box-and-skip)
    (label box-and-shift)
    (add a 8)
    (sub b)
    (ld c 0)
    (label box-and-shift1)
    (scf)
    (rr c)
    (dec a)
    (jr nz box-and-shift1)
    (ld a c)
    (inc b)
    (rlca)
    (label box-and-shift2)
    (rrca)
    (djnz box-and-shift2)

    (label box-and-loop1)
    (push hl)
    (ld b d)
    (ld c a)
    (push de)
    (ld de 12)

    (label box-and-loop2)
    (ld a c)
    (cpl)
    (and (hl))
    (ld (hl) a)
    (add hl de)
    (djnz box-and-loop2)
    (pop de)
    (pop hl)
    (inc hl)
    (ld a e)
    (or a)
    (ret z)
    (sub 8)
    (ld e b)
    (jr c box-and-shift)
    (ld e a)
    (ld a #b11111111)
    (jr box-and-loop1)
    (label box-and-end)

    (label put-sprite16-xor)
    ,@(with-regs-preserve (af hl bc de ix)
                          (push hl)
                          (pop ix)
                          (ld a d)
                          (call put-sprite16-xor2))
    (ret)

    (label put-sprite16-xor2)
    (ld h 0)
    (ld l e)
    (ld d h)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)
    (push iy)
    (pop de)
    (add hl de)
    (ld e a)
    (srl e)
    (srl e)
    (srl e)
    (ld d 0)
    (add hl de)
    (ld d h)
    (ld e l)
    (and 7)
    (jp z aligned-or)
    (ld c a)
    (ld de 12)
    (label row-loop-or)
    (push bc)
    (ld b c)
    (xor a)
    (ld d (+ ix 0))
    (ld e (+ ix 1))

    (label shift-loop-or)
    (srl d)
    (rr e)
    (rra)
    (djnz shift-loop-or)
    (inc hl)
    (inc hl)
    (xor (hl))
    (ld (hl) a)
    (ld a e)
    (dec hl)
    (xor (hl))
    (ld (hl) a)
    (ld a d)
    (dec hl)
    (xor (hl))
    (ld (hl) a)
    (pop bc)
    (ld de 12)
    (add hl de)
    (inc ix)
    (inc ix)
    (djnz row-loop-or)
    (ret)
    (label aligned-or)
    (ld de 11)

    (label aligned-loop-or)
    (ld a (+ ix 0))
    (xor (hl))
    (ld (hl) a)
    (ld a (+ ix 1))
    (inc hl)
    (xor (hl))
    (ld (hl) a)
    (add hl de)
    (inc ix)
    (inc ix)
    (djnz aligned-loop-or)
    (ret)

    (label put-sprite16-and)
    ,@(with-regs-preserve (af hl bc de ix)
                          (push hl)
                          (pop ix)
                          (ld a d)
                          (call put-sprite16-and2))
    (ret)

    (label put-sprite16-and2)
    (ld h 0)
    (ld l e)
    (ld d h)
    (add hl hl)
    (add hl de)
    (add hl hl)
    (add hl hl)
    (push iy)
    (pop de)
    (add hl de)
    ;; (db ,(string "hello"))

    (ld e a)
    (srl e)
    (srl e)
    (srl e)
    (ld d 0)
    (add hl de)
    (ld d h)
    (ld e l)
    (and 7)
    (jp z aligned-and)
    (ld c a)
    (ld de 12)

    (label row-loop-and)
    (push bc)
    (ld b c)
    (xor a)
    (ld d (+ ix 0))
    (ld e (+ ix 1))
    (label shift-loop-and)
    (srl d)
    (rr e)
    (rra)
    (djnz shift-loop-and)
    (inc hl)
    (inc hl)
    (xor (hl))
    (ld (hl) a)
    (ld a e)
    (dec hl)
    (cpl)
    (and (hl))
    (ld (hl) a)
    (ld a d)
    (dec hl)
    (cpl)
    (and (hl))
    (ld (hl) a)
    (pop bc)
    (ld de 12)
    (add hl de)
    (inc ix)
    (inc ix)
    (djnz row-loop-and)
    (ret)
    (label aligned-and)
    (ld de 11)
    (label aligned-loop-and)
    (ld a (+ ix 0))
    (cpl)
    (and (hl))
    (ld (hl) a)
    (ld a (+ ix 1))
    (inc hl)
    (cpl)
    (and (hl))
    (ld (hl) a)
    (add hl de)
    (inc ix)
    (inc ix)
    (djnz aligned-loop-and)
    (ret)))
